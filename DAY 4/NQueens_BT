#NQueens using BT
def solveNQueens(n):
    board = [['.'] * n for i in range(n)]
    res = []

    def backtrack(row, board):
        if row == n:
            res.append(["".join(i) for i in board])
            return
        for col in range(n):
            if is_safe(row, col, board):
                board[row][col] = 'Q'
                backtrack(row + 1, board)
                board[row][col] = "."

    def is_safe(row, col, board):
        # upper col
        for r in range(row, -1, -1):
            if board[r][col] == 'Q':
                return False
        # left diag
        r, c = row, col
        while r >= 0 and c >= 0:
            if board[r][c] == 'Q':
                return False
            r -= 1
            c -= 1
        r, c = row, col
        while r >= 0 and c < n:
            if board[r][c] == 'Q':
                return False
            r -= 1
            c += 1
        return True
    backtrack(0, board)
    return res
n = int(input("Enter n: "))
print(solveNQueens(n))
