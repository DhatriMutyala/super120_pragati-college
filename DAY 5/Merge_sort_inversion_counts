#merge_sort_inversion_counts
def mergesort_inversion(nums):
    if len(nums) <= 1:
        return 0, nums
    
    mid = len(nums) // 2
    li, left = mergesort_inversion(nums[:mid])
    ri, right = mergesort_inversion(nums[mid:])
    mi, merge_list = merge(left, right)
    
    return li + ri + mi, merge_list


def merge(left, right):
    i = 0
    j = 0
    mi = 0
    merge_list = []
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merge_list.append(left[i])
            i += 1
        else:
            merge_list.append(right[j])
            j += 1
           
            mi += (len(left) - i)
    

    merge_list.extend(left[i:])
    merge_list.extend(right[j:])
    
    return mi, merge_list


nums = [12, 14, 9, 8, 5]
inversion_count, sorted_list = mergesort_inversion(nums)
print("Inversion count:", inversion_count)
print("Sorted list:", sorted_list)
